// Copyright 2021 Tencent Inc. All rights reserved.
//
// 商家转账到用户零钱API
//
// * 场景及业务流程：     用于商户向微信用户的零钱进行转账，支持用户确认模式和免密模式。
//
// API version: 1.0.0

// Code generated by WechatPay APIv3 Generator based on [OpenAPI Generator](https://openapi-generator.tech); DO NOT EDIT.

package transferbills

import (
	"encoding/json"
	"fmt"
	"time"
)

// TransferState
type TransferState string

func (e TransferState) Ptr() *TransferState {
	return &e
}

// Enums of TransferState
const (
	TRANSFERSTATE_WAIT_CONFIRM TransferState = "WAIT_CONFIRM"
	TRANSFERSTATE_PROCESSING   TransferState = "PROCESSING"
	TRANSFERSTATE_SUCCESS      TransferState = "SUCCESS"
	TRANSFERSTATE_FAIL         TransferState = "FAIL"
	TRANSFERSTATE_WAIT_PAY     TransferState = "WAIT_PAY"
	TRANSFERSTATE_CANCELING    TransferState = "CANCELING"
	TRANSFERSTATE_CANCELLED    TransferState = "CANCELLED"
)

// CreateTransferBillRequest
type CreateTransferBillRequest struct {
	// 商户appid
	Appid *string `json:"appid"`
	// 商户订单号，需要唯一
	OutBillNo *string `json:"out_bill_no"`
	// 转账场景ID
	TransferSceneId *string `json:"transfer_scene_id"`
	// 用户openid
	Openid *string `json:"openid"`
	// 转账金额，单位为分
	TransferAmount *int64 `json:"transfer_amount"`
	// 转账备注，会显示在微信用户的零钱记录中
	TransferRemark *string `json:"transfer_remark"`
	// 收款方真实姓名。支持标准RSA算法和国密算法，公钥由微信侧提供
	UserName *string `json:"user_name,omitempty" encryption:"EM_APIV3"`
	// 用户确认时需要的包信息
	PackageInfo *string `json:"package_info,omitempty"`
}

func (o CreateTransferBillRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}

	if o.Appid == nil {
		return nil, fmt.Errorf("field `Appid` is required and must be specified in CreateTransferBillRequest")
	}
	toSerialize["appid"] = o.Appid

	if o.OutBillNo == nil {
		return nil, fmt.Errorf("field `OutBillNo` is required and must be specified in CreateTransferBillRequest")
	}
	toSerialize["out_bill_no"] = o.OutBillNo

	if o.TransferSceneId == nil {
		return nil, fmt.Errorf("field `TransferSceneId` is required and must be specified in CreateTransferBillRequest")
	}
	toSerialize["transfer_scene_id"] = o.TransferSceneId

	if o.Openid == nil {
		return nil, fmt.Errorf("field `Openid` is required and must be specified in CreateTransferBillRequest")
	}
	toSerialize["openid"] = o.Openid

	if o.TransferAmount == nil {
		return nil, fmt.Errorf("field `TransferAmount` is required and must be specified in CreateTransferBillRequest")
	}
	toSerialize["transfer_amount"] = o.TransferAmount

	if o.TransferRemark == nil {
		return nil, fmt.Errorf("field `TransferRemark` is required and must be specified in CreateTransferBillRequest")
	}
	toSerialize["transfer_remark"] = o.TransferRemark

	if o.UserName != nil {
		toSerialize["user_name"] = o.UserName
	}

	if o.PackageInfo != nil {
		toSerialize["package_info"] = o.PackageInfo
	}

	return json.Marshal(toSerialize)
}

func (o CreateTransferBillRequest) String() string {
	var ret string
	if o.Appid == nil {
		ret += "Appid:<nil>, "
	} else {
		ret += fmt.Sprintf("Appid:%v, ", *o.Appid)
	}

	if o.OutBillNo == nil {
		ret += "OutBillNo:<nil>, "
	} else {
		ret += fmt.Sprintf("OutBillNo:%v, ", *o.OutBillNo)
	}

	if o.TransferSceneId == nil {
		ret += "TransferSceneId:<nil>, "
	} else {
		ret += fmt.Sprintf("TransferSceneId:%v, ", *o.TransferSceneId)
	}

	if o.Openid == nil {
		ret += "Openid:<nil>, "
	} else {
		ret += fmt.Sprintf("Openid:%v, ", *o.Openid)
	}

	if o.TransferAmount == nil {
		ret += "TransferAmount:<nil>, "
	} else {
		ret += fmt.Sprintf("TransferAmount:%v, ", *o.TransferAmount)
	}

	if o.TransferRemark == nil {
		ret += "TransferRemark:<nil>, "
	} else {
		ret += fmt.Sprintf("TransferRemark:%v, ", *o.TransferRemark)
	}

	if o.UserName == nil {
		ret += "UserName:<nil>, "
	} else {
		ret += fmt.Sprintf("UserName:%v, ", *o.UserName)
	}

	if o.PackageInfo == nil {
		ret += "PackageInfo:<nil>"
	} else {
		ret += fmt.Sprintf("PackageInfo:%v", *o.PackageInfo)
	}

	return fmt.Sprintf("CreateTransferBillRequest{%s}", ret)
}

func (o CreateTransferBillRequest) Clone() *CreateTransferBillRequest {
	ret := CreateTransferBillRequest{}

	if o.Appid != nil {
		ret.Appid = new(string)
		*ret.Appid = *o.Appid
	}

	if o.OutBillNo != nil {
		ret.OutBillNo = new(string)
		*ret.OutBillNo = *o.OutBillNo
	}

	if o.TransferSceneId != nil {
		ret.TransferSceneId = new(string)
		*ret.TransferSceneId = *o.TransferSceneId
	}

	if o.Openid != nil {
		ret.Openid = new(string)
		*ret.Openid = *o.Openid
	}

	if o.TransferAmount != nil {
		ret.TransferAmount = new(int64)
		*ret.TransferAmount = *o.TransferAmount
	}

	if o.TransferRemark != nil {
		ret.TransferRemark = new(string)
		*ret.TransferRemark = *o.TransferRemark
	}

	if o.UserName != nil {
		ret.UserName = new(string)
		*ret.UserName = *o.UserName
	}

	if o.PackageInfo != nil {
		ret.PackageInfo = new(string)
		*ret.PackageInfo = *o.PackageInfo
	}

	return &ret
}

// CreateTransferBillResponse
type CreateTransferBillResponse struct {
	// 商户订单号
	OutBillNo *string `json:"out_bill_no"`
	// 微信转账单号
	TransferBillNo *string `json:"transfer_bill_no"`
	// 转账创建时间
	CreateTime *time.Time `json:"create_time"`
	// 转账状态
	State *TransferState `json:"state"`
	// 用户确认时需要的包信息
	PackageInfo *string `json:"package_info,omitempty"`
}

func (o CreateTransferBillResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}

	if o.OutBillNo == nil {
		return nil, fmt.Errorf("field `OutBillNo` is required and must be specified in CreateTransferBillResponse")
	}
	toSerialize["out_bill_no"] = o.OutBillNo

	if o.TransferBillNo == nil {
		return nil, fmt.Errorf("field `TransferBillNo` is required and must be specified in CreateTransferBillResponse")
	}
	toSerialize["transfer_bill_no"] = o.TransferBillNo

	if o.CreateTime == nil {
		return nil, fmt.Errorf("field `CreateTime` is required and must be specified in CreateTransferBillResponse")
	}
	toSerialize["create_time"] = o.CreateTime.Format(time.RFC3339)

	if o.State == nil {
		return nil, fmt.Errorf("field `State` is required and must be specified in CreateTransferBillResponse")
	}
	toSerialize["state"] = o.State

	if o.PackageInfo != nil {
		toSerialize["package_info"] = o.PackageInfo
	}

	return json.Marshal(toSerialize)
}

func (o CreateTransferBillResponse) String() string {
	var ret string
	if o.OutBillNo == nil {
		ret += "OutBillNo:<nil>, "
	} else {
		ret += fmt.Sprintf("OutBillNo:%v, ", *o.OutBillNo)
	}

	if o.TransferBillNo == nil {
		ret += "TransferBillNo:<nil>, "
	} else {
		ret += fmt.Sprintf("TransferBillNo:%v, ", *o.TransferBillNo)
	}

	if o.CreateTime == nil {
		ret += "CreateTime:<nil>, "
	} else {
		ret += fmt.Sprintf("CreateTime:%v, ", *o.CreateTime)
	}

	if o.State == nil {
		ret += "State:<nil>, "
	} else {
		ret += fmt.Sprintf("State:%v, ", *o.State)
	}

	if o.PackageInfo == nil {
		ret += "PackageInfo:<nil>"
	} else {
		ret += fmt.Sprintf("PackageInfo:%v", *o.PackageInfo)
	}

	return fmt.Sprintf("CreateTransferBillResponse{%s}", ret)
}

func (o CreateTransferBillResponse) Clone() *CreateTransferBillResponse {
	ret := CreateTransferBillResponse{}

	if o.OutBillNo != nil {
		ret.OutBillNo = new(string)
		*ret.OutBillNo = *o.OutBillNo
	}

	if o.TransferBillNo != nil {
		ret.TransferBillNo = new(string)
		*ret.TransferBillNo = *o.TransferBillNo
	}

	if o.CreateTime != nil {
		ret.CreateTime = new(time.Time)
		*ret.CreateTime = *o.CreateTime
	}

	if o.State != nil {
		ret.State = new(TransferState)
		*ret.State = *o.State
	}

	if o.PackageInfo != nil {
		ret.PackageInfo = new(string)
		*ret.PackageInfo = *o.PackageInfo
	}

	return &ret
}

// GetTransferBillByOutBillNoRequest
type GetTransferBillByOutBillNoRequest struct {
	// 商户订单号
	OutBillNo *string `json:"out_bill_no"`
}

func (o GetTransferBillByOutBillNoRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}

	if o.OutBillNo == nil {
		return nil, fmt.Errorf("field `OutBillNo` is required and must be specified in GetTransferBillByOutBillNoRequest")
	}
	toSerialize["out_bill_no"] = o.OutBillNo

	return json.Marshal(toSerialize)
}

func (o GetTransferBillByOutBillNoRequest) String() string {
	var ret string
	if o.OutBillNo == nil {
		ret += "OutBillNo:<nil>"
	} else {
		ret += fmt.Sprintf("OutBillNo:%v", *o.OutBillNo)
	}

	return fmt.Sprintf("GetTransferBillByOutBillNoRequest{%s}", ret)
}

func (o GetTransferBillByOutBillNoRequest) Clone() *GetTransferBillByOutBillNoRequest {
	ret := GetTransferBillByOutBillNoRequest{}

	if o.OutBillNo != nil {
		ret.OutBillNo = new(string)
		*ret.OutBillNo = *o.OutBillNo
	}

	return &ret
}

// TransferBillEntity
type TransferBillEntity struct {
	// 商户号
	Mchid *string `json:"mchid"`
	// 商户appid
	Appid *string `json:"appid"`
	// 商户订单号
	OutBillNo *string `json:"out_bill_no"`
	// 微信转账单号
	TransferBillNo *string `json:"transfer_bill_no"`
	// 转账场景ID
	TransferSceneId *string `json:"transfer_scene_id"`
	// 用户openid
	Openid *string `json:"openid"`
	// 转账金额，单位为分
	TransferAmount *int64 `json:"transfer_amount"`
	// 转账备注
	TransferRemark *string `json:"transfer_remark"`
	// 收款方真实姓名
	UserName *string `json:"user_name,omitempty" encryption:"EM_APIV3"`
	// 转账状态
	State *TransferState `json:"state"`
	// 转账创建时间
	CreateTime *time.Time `json:"create_time"`
	// 转账更新时间
	UpdateTime *time.Time `json:"update_time"`
	// 失败原因
	FailReason *string `json:"fail_reason,omitempty"`
}

func (o TransferBillEntity) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}

	if o.Mchid == nil {
		return nil, fmt.Errorf("field `Mchid` is required and must be specified in TransferBillEntity")
	}
	toSerialize["mchid"] = o.Mchid

	if o.Appid == nil {
		return nil, fmt.Errorf("field `Appid` is required and must be specified in TransferBillEntity")
	}
	toSerialize["appid"] = o.Appid

	if o.OutBillNo == nil {
		return nil, fmt.Errorf("field `OutBillNo` is required and must be specified in TransferBillEntity")
	}
	toSerialize["out_bill_no"] = o.OutBillNo

	if o.TransferBillNo == nil {
		return nil, fmt.Errorf("field `TransferBillNo` is required and must be specified in TransferBillEntity")
	}
	toSerialize["transfer_bill_no"] = o.TransferBillNo

	if o.TransferSceneId == nil {
		return nil, fmt.Errorf("field `TransferSceneId` is required and must be specified in TransferBillEntity")
	}
	toSerialize["transfer_scene_id"] = o.TransferSceneId

	if o.Openid == nil {
		return nil, fmt.Errorf("field `Openid` is required and must be specified in TransferBillEntity")
	}
	toSerialize["openid"] = o.Openid

	if o.TransferAmount == nil {
		return nil, fmt.Errorf("field `TransferAmount` is required and must be specified in TransferBillEntity")
	}
	toSerialize["transfer_amount"] = o.TransferAmount

	if o.TransferRemark == nil {
		return nil, fmt.Errorf("field `TransferRemark` is required and must be specified in TransferBillEntity")
	}
	toSerialize["transfer_remark"] = o.TransferRemark

	if o.UserName != nil {
		toSerialize["user_name"] = o.UserName
	}

	if o.State == nil {
		return nil, fmt.Errorf("field `State` is required and must be specified in TransferBillEntity")
	}
	toSerialize["state"] = o.State

	if o.CreateTime == nil {
		return nil, fmt.Errorf("field `CreateTime` is required and must be specified in TransferBillEntity")
	}
	toSerialize["create_time"] = o.CreateTime.Format(time.RFC3339)

	if o.UpdateTime == nil {
		return nil, fmt.Errorf("field `UpdateTime` is required and must be specified in TransferBillEntity")
	}
	toSerialize["update_time"] = o.UpdateTime.Format(time.RFC3339)

	if o.FailReason != nil {
		toSerialize["fail_reason"] = o.FailReason
	}

	return json.Marshal(toSerialize)
}

func (o TransferBillEntity) String() string {
	var ret string
	if o.Mchid == nil {
		ret += "Mchid:<nil>, "
	} else {
		ret += fmt.Sprintf("Mchid:%v, ", *o.Mchid)
	}

	if o.Appid == nil {
		ret += "Appid:<nil>, "
	} else {
		ret += fmt.Sprintf("Appid:%v, ", *o.Appid)
	}

	if o.OutBillNo == nil {
		ret += "OutBillNo:<nil>, "
	} else {
		ret += fmt.Sprintf("OutBillNo:%v, ", *o.OutBillNo)
	}

	if o.TransferBillNo == nil {
		ret += "TransferBillNo:<nil>, "
	} else {
		ret += fmt.Sprintf("TransferBillNo:%v, ", *o.TransferBillNo)
	}

	if o.TransferSceneId == nil {
		ret += "TransferSceneId:<nil>, "
	} else {
		ret += fmt.Sprintf("TransferSceneId:%v, ", *o.TransferSceneId)
	}

	if o.Openid == nil {
		ret += "Openid:<nil>, "
	} else {
		ret += fmt.Sprintf("Openid:%v, ", *o.Openid)
	}

	if o.TransferAmount == nil {
		ret += "TransferAmount:<nil>, "
	} else {
		ret += fmt.Sprintf("TransferAmount:%v, ", *o.TransferAmount)
	}

	if o.TransferRemark == nil {
		ret += "TransferRemark:<nil>, "
	} else {
		ret += fmt.Sprintf("TransferRemark:%v, ", *o.TransferRemark)
	}

	if o.UserName == nil {
		ret += "UserName:<nil>, "
	} else {
		ret += fmt.Sprintf("UserName:%v, ", *o.UserName)
	}

	if o.State == nil {
		ret += "State:<nil>, "
	} else {
		ret += fmt.Sprintf("State:%v, ", *o.State)
	}

	if o.CreateTime == nil {
		ret += "CreateTime:<nil>, "
	} else {
		ret += fmt.Sprintf("CreateTime:%v, ", *o.CreateTime)
	}

	if o.UpdateTime == nil {
		ret += "UpdateTime:<nil>, "
	} else {
		ret += fmt.Sprintf("UpdateTime:%v, ", *o.UpdateTime)
	}

	if o.FailReason == nil {
		ret += "FailReason:<nil>"
	} else {
		ret += fmt.Sprintf("FailReason:%v", *o.FailReason)
	}

	return fmt.Sprintf("TransferBillEntity{%s}", ret)
}

func (o TransferBillEntity) Clone() *TransferBillEntity {
	ret := TransferBillEntity{}

	if o.Mchid != nil {
		ret.Mchid = new(string)
		*ret.Mchid = *o.Mchid
	}

	if o.Appid != nil {
		ret.Appid = new(string)
		*ret.Appid = *o.Appid
	}

	if o.OutBillNo != nil {
		ret.OutBillNo = new(string)
		*ret.OutBillNo = *o.OutBillNo
	}

	if o.TransferBillNo != nil {
		ret.TransferBillNo = new(string)
		*ret.TransferBillNo = *o.TransferBillNo
	}

	if o.TransferSceneId != nil {
		ret.TransferSceneId = new(string)
		*ret.TransferSceneId = *o.TransferSceneId
	}

	if o.Openid != nil {
		ret.Openid = new(string)
		*ret.Openid = *o.Openid
	}

	if o.TransferAmount != nil {
		ret.TransferAmount = new(int64)
		*ret.TransferAmount = *o.TransferAmount
	}

	if o.TransferRemark != nil {
		ret.TransferRemark = new(string)
		*ret.TransferRemark = *o.TransferRemark
	}

	if o.UserName != nil {
		ret.UserName = new(string)
		*ret.UserName = *o.UserName
	}

	if o.State != nil {
		ret.State = new(TransferState)
		*ret.State = *o.State
	}

	if o.CreateTime != nil {
		ret.CreateTime = new(time.Time)
		*ret.CreateTime = *o.CreateTime
	}

	if o.UpdateTime != nil {
		ret.UpdateTime = new(time.Time)
		*ret.UpdateTime = *o.UpdateTime
	}

	if o.FailReason != nil {
		ret.FailReason = new(string)
		*ret.FailReason = *o.FailReason
	}

	return &ret
}

// CancelTransferBillRequest
type CancelTransferBillRequest struct {
	// 商户订单号
	OutBillNo *string `json:"out_bill_no"`
}

func (o CancelTransferBillRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}

	if o.OutBillNo == nil {
		return nil, fmt.Errorf("field `OutBillNo` is required and must be specified in CancelTransferBillRequest")
	}
	toSerialize["out_bill_no"] = o.OutBillNo

	return json.Marshal(toSerialize)
}

func (o CancelTransferBillRequest) String() string {
	var ret string
	if o.OutBillNo == nil {
		ret += "OutBillNo:<nil>"
	} else {
		ret += fmt.Sprintf("OutBillNo:%v", *o.OutBillNo)
	}

	return fmt.Sprintf("CancelTransferBillRequest{%s}", ret)
}

func (o CancelTransferBillRequest) Clone() *CancelTransferBillRequest {
	ret := CancelTransferBillRequest{}

	if o.OutBillNo != nil {
		ret.OutBillNo = new(string)
		*ret.OutBillNo = *o.OutBillNo
	}

	return &ret
}

// CancelTransferBillResponse
type CancelTransferBillResponse struct {
	// 商户订单号
	OutBillNo *string `json:"out_bill_no"`
	// 微信转账单号
	TransferBillNo *string `json:"transfer_bill_no"`
	// 转账状态
	State *TransferState `json:"state"`
	// 转账更新时间
	UpdateTime *time.Time `json:"update_time"`
}

func (o CancelTransferBillResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}

	if o.OutBillNo == nil {
		return nil, fmt.Errorf("field `OutBillNo` is required and must be specified in CancelTransferBillResponse")
	}
	toSerialize["out_bill_no"] = o.OutBillNo

	if o.TransferBillNo == nil {
		return nil, fmt.Errorf("field `TransferBillNo` is required and must be specified in CancelTransferBillResponse")
	}
	toSerialize["transfer_bill_no"] = o.TransferBillNo

	if o.State == nil {
		return nil, fmt.Errorf("field `State` is required and must be specified in CancelTransferBillResponse")
	}
	toSerialize["state"] = o.State

	if o.UpdateTime == nil {
		return nil, fmt.Errorf("field `UpdateTime` is required and must be specified in CancelTransferBillResponse")
	}
	toSerialize["update_time"] = o.UpdateTime.Format(time.RFC3339)

	return json.Marshal(toSerialize)
}

func (o CancelTransferBillResponse) String() string {
	var ret string
	if o.OutBillNo == nil {
		ret += "OutBillNo:<nil>, "
	} else {
		ret += fmt.Sprintf("OutBillNo:%v, ", *o.OutBillNo)
	}

	if o.TransferBillNo == nil {
		ret += "TransferBillNo:<nil>, "
	} else {
		ret += fmt.Sprintf("TransferBillNo:%v, ", *o.TransferBillNo)
	}

	if o.State == nil {
		ret += "State:<nil>, "
	} else {
		ret += fmt.Sprintf("State:%v, ", *o.State)
	}

	if o.UpdateTime == nil {
		ret += "UpdateTime:<nil>"
	} else {
		ret += fmt.Sprintf("UpdateTime:%v", *o.UpdateTime)
	}

	return fmt.Sprintf("CancelTransferBillResponse{%s}", ret)
}

func (o CancelTransferBillResponse) Clone() *CancelTransferBillResponse {
	ret := CancelTransferBillResponse{}

	if o.OutBillNo != nil {
		ret.OutBillNo = new(string)
		*ret.OutBillNo = *o.OutBillNo
	}

	if o.TransferBillNo != nil {
		ret.TransferBillNo = new(string)
		*ret.TransferBillNo = *o.TransferBillNo
	}

	if o.State != nil {
		ret.State = new(TransferState)
		*ret.State = *o.State
	}

	if o.UpdateTime != nil {
		ret.UpdateTime = new(time.Time)
		*ret.UpdateTime = *o.UpdateTime
	}

	return &ret
}
