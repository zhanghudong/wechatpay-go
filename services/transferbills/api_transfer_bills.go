// Copyright 2021 Tencent Inc. All rights reserved.
//
// 商家转账到用户零钱API
//
// * 场景及业务流程：     用于商户向微信用户的零钱进行转账，支持用户确认模式和免密模式。
//
// API version: 1.0.0

// Code generated by WechatPay APIv3 Generator based on [OpenAPI Generator](https://openapi-generator.tech); DO NOT EDIT.

package transferbills

import (
	"context"
	"fmt"
	nethttp "net/http"
	neturl "net/url"
	"strings"

	"github.com/wechatpay-apiv3/wechatpay-go/core"
	"github.com/wechatpay-apiv3/wechatpay-go/core/consts"
	"github.com/wechatpay-apiv3/wechatpay-go/services"
)

type TransferBillsApiService services.Service

// CreateTransferBill 发起商家转账到用户零钱
//
// 商户可以通过该接口向微信用户的零钱进行转账操作。请求消息中应包含商户订单号、转账场景ID、用户openid、转账金额、转账备注等信息。
func (a *TransferBillsApiService) CreateTransferBill(ctx context.Context, req CreateTransferBillRequest) (resp *CreateTransferBillResponse, result *core.APIResult, err error) {
	var (
		localVarHTTPMethod   = nethttp.MethodPost
		localVarPostBody     interface{}
		localVarQueryParams  neturl.Values
		localVarHeaderParams = nethttp.Header{}
	)

	// 对请求中敏感字段进行加密
	encReq := req.Clone()
	encryptCertificate, err := a.Client.EncryptRequest(ctx, encReq)
	if err != nil {
		return nil, nil, fmt.Errorf("encrypt request failed: %v", err)
	}

	if encryptCertificate != "" {
		localVarHeaderParams.Set(consts.WechatPaySerial, encryptCertificate)
	}
	req = *encReq

	localVarPath := consts.WechatPayAPIServer + "/v3/fund-app/mch-transfer/transfer-bills"

	// Setup Body Params
	localVarPostBody = req

	// Determine the Content-Type Header
	localVarHTTPContentTypes := []string{"application/json"}
	// Setup Content-Type
	localVarHTTPContentType := core.SelectHeaderContentType(localVarHTTPContentTypes)

	// Perform Http Request
	result, err = a.Client.Request(ctx, localVarHTTPMethod, localVarPath, localVarHeaderParams, localVarQueryParams, localVarPostBody, localVarHTTPContentType)
	if err != nil {
		return nil, result, err
	}

	// Extract CreateTransferBillResponse from Http Response
	resp = new(CreateTransferBillResponse)
	err = core.UnMarshalResponse(result.Response, resp)
	if err != nil {
		return nil, result, err
	}
	return resp, result, nil
}

// GetTransferBillByOutBillNo 通过商户订单号查询转账单
//
// 商户可以通过该接口查询转账单的详细信息。返回消息中包含转账状态、转账金额、转账时间等信息。
func (a *TransferBillsApiService) GetTransferBillByOutBillNo(ctx context.Context, req GetTransferBillByOutBillNoRequest) (resp *TransferBillEntity, result *core.APIResult, err error) {
	var (
		localVarHTTPMethod   = nethttp.MethodGet
		localVarPostBody     interface{}
		localVarQueryParams  neturl.Values
		localVarHeaderParams = nethttp.Header{}
	)

	// Make sure Path Params are properly set
	if req.OutBillNo == nil {
		return nil, nil, fmt.Errorf("field `OutBillNo` is required and must be specified in GetTransferBillByOutBillNoRequest")
	}

	localVarPath := consts.WechatPayAPIServer + "/v3/fund-app/mch-transfer/transfer-bills/out-bill-no/{out_bill_no}"
	// Build Path with Path Params
	localVarPath = strings.Replace(localVarPath, "{"+"out_bill_no"+"}", neturl.PathEscape(core.ParameterToString(*req.OutBillNo, "")), -1)

	// Determine the Content-Type Header
	localVarHTTPContentTypes := []string{}
	// Setup Content-Type
	localVarHTTPContentType := core.SelectHeaderContentType(localVarHTTPContentTypes)

	// Perform Http Request
	result, err = a.Client.Request(ctx, localVarHTTPMethod, localVarPath, localVarHeaderParams, localVarQueryParams, localVarPostBody, localVarHTTPContentType)
	if err != nil {
		return nil, result, err
	}

	// Extract TransferBillEntity from Http Response
	resp = new(TransferBillEntity)
	err = core.UnMarshalResponse(result.Response, resp)
	if err != nil {
		return nil, result, err
	}
	return resp, result, nil
}

// GetTransferBillByTransferBillNo 通过微信转账单号查询转账单
//
// 商户可以通过该接口使用微信转账单号查询转账单的详细信息。返回消息中包含转账状态、转账金额、转账时间等信息。
func (a *TransferBillsApiService) GetTransferBillByTransferBillNo(ctx context.Context, req GetTransferBillByTransferBillNoRequest) (resp *TransferBillEntity, result *core.APIResult, err error) {
	var (
		localVarHTTPMethod   = nethttp.MethodGet
		localVarPostBody     interface{}
		localVarQueryParams  neturl.Values
		localVarHeaderParams = nethttp.Header{}
	)

	// Make sure Path Params are properly set
	if req.TransferBillNo == nil {
		return nil, nil, fmt.Errorf("field `TransferBillNo` is required and must be specified in GetTransferBillByTransferBillNoRequest")
	}

	localVarPath := consts.WechatPayAPIServer + "/v3/fund-app/mch-transfer/transfer-bills/transfer-bill-no/{transfer_bill_no}"
	// Build Path with Path Params
	localVarPath = strings.Replace(localVarPath, "{"+"transfer_bill_no"+"}", neturl.PathEscape(core.ParameterToString(*req.TransferBillNo, "")), -1)

	// Determine the Content-Type Header
	localVarHTTPContentTypes := []string{}
	// Setup Content-Type
	localVarHTTPContentType := core.SelectHeaderContentType(localVarHTTPContentTypes)

	// Perform Http Request
	result, err = a.Client.Request(ctx, localVarHTTPMethod, localVarPath, localVarHeaderParams, localVarQueryParams, localVarPostBody, localVarHTTPContentType)
	if err != nil {
		return nil, result, err
	}

	// Extract TransferBillEntity from Http Response
	resp = new(TransferBillEntity)
	err = core.UnMarshalResponse(result.Response, resp)
	if err != nil {
		return nil, result, err
	}
	return resp, result, nil
}

// CancelTransferBill 撤销转账
//
// 商户可以通过该接口撤销已发起但尚未完成的转账单。只有在用户尚未确认收款时才能撤销。
func (a *TransferBillsApiService) CancelTransferBill(ctx context.Context, req CancelTransferBillRequest) (resp *CancelTransferBillResponse, result *core.APIResult, err error) {
	var (
		localVarHTTPMethod   = nethttp.MethodPost
		localVarPostBody     interface{}
		localVarQueryParams  neturl.Values
		localVarHeaderParams = nethttp.Header{}
	)

	// Make sure Path Params are properly set
	if req.OutBillNo == nil {
		return nil, nil, fmt.Errorf("field `OutBillNo` is required and must be specified in CancelTransferBillRequest")
	}

	localVarPath := consts.WechatPayAPIServer + "/v3/fund-app/mch-transfer/transfer-bills/out-bill-no/{out_bill_no}/cancel"
	// Build Path with Path Params
	localVarPath = strings.Replace(localVarPath, "{"+"out_bill_no"+"}", neturl.PathEscape(core.ParameterToString(*req.OutBillNo, "")), -1)

	// Determine the Content-Type Header
	localVarHTTPContentTypes := []string{"application/json"}
	// Setup Content-Type
	localVarHTTPContentType := core.SelectHeaderContentType(localVarHTTPContentTypes)

	// Perform Http Request
	result, err = a.Client.Request(ctx, localVarHTTPMethod, localVarPath, localVarHeaderParams, localVarQueryParams, localVarPostBody, localVarHTTPContentType)
	if err != nil {
		return nil, result, err
	}

	// Extract CancelTransferBillResponse from Http Response
	resp = new(CancelTransferBillResponse)
	err = core.UnMarshalResponse(result.Response, resp)
	if err != nil {
		return nil, result, err
	}
	return resp, result, nil
}